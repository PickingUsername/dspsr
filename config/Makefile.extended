#-*-Makefile-*- helps emacs recognize this file as a Makefile

##########################################################################
##########################################################################
# Define those files recognized by make

.SUFFIXES: .o .c .C .f .h .dep .sdep .ldep

.PRECIOUS: ${LOGIN_ARCH}/%.o

# Ensure that the proper shell is used
SHELL = /bin/sh

##########################################################################
##########################################################################
###  MACRO DEFINITIONS
##########################################################################
##########################################################################


##########################################################################
# these variables define a number of useful functions
##########################################################################

# converts a list of source code file names to object code filenames
src2obj = ${patsubst %.c,%.o,${patsubst %.f,%.o,${patsubst %.C,%.o,$(1)}}}

# converts a list of source code file names to executable filenames
src2bin = ${patsubst %.c,%,${patsubst %.f,%,${patsubst %.C,%,$(1)}}}

# filters the archive names out of $(1)
lib.l = $(patsubst -l%,lib%.a,$(sort $(filter -l%,$(1))))

# filters the library paths out of $(1)
lib.L = $(subst -L,,$(filter -L%,$(1)))

# finds the first instance of the file, $(1), in the list of paths, $(2)
firstpath = $(firstword $(wildcard $(addsuffix /$(1), $(2))))

# finds the first archive in each of the library paths of $(1)
lib_deps = $(foreach l,$(lib.l),$(call firstpath,$(l),$(call lib.L,$(1))))

# set the list of archives on which the general executable depends 
libraries := $(call lib_deps,$(LDFLAGS))

# returns the list of object code files for a specific executable, $(1)
eval_srcs = $(addprefix ${LOGIN_ARCH}/, $(call src2obj,$($(1).srcs)))

# returns the list of archives for a specific executable, $(1)
eval_libs = $(if $($(1).LDFLAGS),$(call lib_deps,$($(1).LDFLAGS)),$(libraries))


##########################################################################
# The following lines create the BINS macro, upon which the "all" target 
# depends and the EXECUTABLES macro used in the calculation of the
# SRC_DEPS macro.
# PROGRAMS and EXECUTABLES macros are defined in the user Makefile
##########################################################################
# Add programs to executables (PROGRAMS lists the source code,
# from which the extensions must be stripped).
EXECS := $(call src2bin,$(PROGRAMS))
EXECUTABLES += $(EXECS)

# define bin path executables
BINS:=$(EXECUTABLES:%=$(BINDIR)/%)



##########################################################################
# The following lines create the SRC_DEPS macro,
# upon which the Makefile depends.  This allows executables to be built
# from more than one source code file using the 'exec.srcs = blah.c'
# macro functionality
##########################################################################

# expand each exec.srcs macro to e.g. exec.srcs"blah.c more.C"
SRCS_EXP := $(foreach exec,$(EXECUTABLES),$(exec).srcs\"${$(exec).srcs}\")
# filter out those expansions with empty ""
SRCS_CLEAN := $(strip $(filter-out %\"\",$(SRCS_EXP)))
# now select those exec.srcs strings left
SRCS_INCLUDE := $(filter %.srcs,$(subst \", ,$(SRCS_CLEAN)))
# and make the list of files to include
SRC_DEPS := $(SRCS_INCLUDE:%.srcs=./$(LOGIN_ARCH)/%.sdep)

# now filter out the exec.srcs strings and remove repeats
OTHER_SRCS += $(sort $(filter-out %.srcs,$(subst \", ,$(SRCS_CLEAN))))



##########################################################################
# The ALL_SRCS macro determines for which files makedepend will be called
# to construct the header file dependency list.
# It also defines those targets that may be built by cvs checkout.
#
# PROGRAMS and LIB_SRCS and TESTS and OTHER_SRCS macros are previously
# defined in the user Makefile.
#
# moc_%.C files are filtered out because they are Qt Meta-Object source
# code created from a .h header file, but the object code may still be
# required in an archive (using LIB_SRCS)
##########################################################################
all_srcs := $(sort ${LIB_SRCS} ${DSO_SRCS}) ${PROGRAMS} ${TESTS} ${OTHER_SRCS}
ALL_SRCS := ${filter-out moc_%.C, ${all_srcs}}



##########################################################################
# The following lines create the DEPS macro, upon which the Makefile 
# depends. (unless MAKEDEP=no)  Dependencies are built only for C/C++ code
##########################################################################
DEP_SRCS := ${filter-out $(NOMD_SRCS), $(ALL_SRCS)}
DEP_C_SRCS := ${filter %.C, $(DEP_SRCS)}
DEP_c_SRCS := ${filter %.c, $(DEP_SRCS)}

DEPS := ${DEP_C_SRCS:%.C=./$(LOGIN_ARCH)/%.dep} \
	${DEP_c_SRCS:%.c=./$(LOGIN_ARCH)/%.dep}



##########################################################################
# The following lines create the INCS macro,
# upon which the "include" target depends.
# INCLUDE macro is previously defined in the user Makefile
##########################################################################

ifdef NAMESPACE
INCDIR := $(INCDIR)/$(NAMESPACE)
INSTALL_INCDIR := $(INSTALL_INCDIR)/$(NAMESPACE)
endif

SUBINCS := $(filter $(SUBINCDIR)/%,$(INCLUDES))
BASINCS := $(filter-out $(SUBINCDIR)/%,$(INCLUDES))
INCLUDES := $(patsubst $(SUBINCDIR)/%,%,$(INCLUDES))

SUBINCS := ${SUBINCS:%=$(INCDIR)/%}
BASINCS := ${BASINCS:%=$(INCDIR)/%}
INCS := $(SUBINCS) $(BASINCS)

##########################################################################
# The following lines create the SHXS macro,
# upon which the "scripts" target depends.
# SCRIPTS macro is previously defined in the user Makefile
##########################################################################
SHXS:=${SCRIPTS:%=$(SHXDIR)/%}

##########################################################################
# The following lines create the LIBS macro,
# upon which the "libs" target depends.
# LIBRARY and LIBRARIES macros are previously defined in the user Makefile
##########################################################################
LIBRARIES += ${LIBRARY} 
ALL_LIBS := ${LIBRARIES} ${DSO_NAME}
LIBS:=${ALL_LIBS:%=$(LIBDIR)/%}

##########################################################################
# The following lines create the RUNTESTS macro,
# upon which the "test" target depends...
# TESTS and TESTEXECS macros are previously defined in the user Makefile
##########################################################################
TEXECS := $(call src2bin,$(TESTS))
TESTEXECS += $(TEXECS)

RUNTESTS:=$(TESTEXECS:%=%.runtest)



##########################################################################
# Flags specified to makedepend
#########################################################################
MDFLAGS += ${INCFLAGS}

ifeq ($(PSRGTKMM),yes)
MDFLAGS += -DGTK_MAJOR_VERSION=2 # makedepend is stupid
endif



##########################################################################
# The INSTALL_INCS, INSTALL_SHXS, INSTALL_LIBS and INSTALL_BINS macros
# are constructed in a separate Makefile that specializes in installations
##########################################################################
make_install := $(LOCAL_ROOT)/include/Makefile.install
include $(make_install)




##########################################################################
##########################################################################

###  IMPLICIT RULE DEFINITIONS
##########################################################################
##########################################################################

##########################################################################
# Disable attempts to compile C++ include files
##########################################################################
/usr/include/cxx/%:

##########################################################################
# Rules to make the header file dependency list in the appropriate 
# architecture specific subdirectory.
# The recommendation comes from the GNU make 3.77 docucmentation:
# "Writing Rules" chapter; "Generating Dependencies Automatically" section
##########################################################################
$(LOGIN_ARCH)/%.dep: %.c $(LOGIN_ARCH)/.exists
	$(header_depend)

$(LOGIN_ARCH)/%.dep: %.C $(LOGIN_ARCH)/.exists
	$(header_depend)

ifneq ($(DEBUG),yes)
MAKEDEPEND_OUT := 2> /dev/null
MAKEDEPEND := -$(MAKEDEPEND)
endif

define header_depend
@touch $@.tmp
@echo makedepend $<
@$(MAKEDEPEND) $@.tmp ${MDFLAGS} ${CPPFLAGS} $< $(MAKEDEPEND_OUT)
@sed 's/$*\.o/$(LOGIN_ARCH)\/$*\.o/g' $@.tmp > $@
@$(RM) $@.tmp
endef



##########################################################################
# Implicit rule to clean up .dep files that reference header files have 
# been moved or no longer exist where previously found.  This should make
# it so that one never need type 'make depend' ever again.
##########################################################################
%.h:
	@echo Removing outdated header dependencies for $@
	@$(remove_outdated_deps)

define remove_outdated_deps
$(GREP) $@ ${LOGIN_ARCH}/*.dep | $(AWK) -F: '{print "rm -rf "$$1}' | sh
endef



##########################################################################
# Implicit rule to make the object code dependency list in the appropriate
# architecture specific subdirectory.  These files depend on the Makefile,
# as their information is changed only when the link information changes.
##########################################################################

$(LOGIN_ARCH)/%.sdep: Makefile $(LOGIN_ARCH)/.exists
	@echo source depend: $*
	@echo "$*.OBJS := $(call eval_srcs,$*)" > ${LOGIN_ARCH}/$*.sdep;
	@echo '${BINDIR}/$*: $$($*.OBJS)' >> ${LOGIN_ARCH}/$*.sdep;



##########################################################################
# The following defines the LIB_DEPS macro, and the list of .ldep files
# upon which the Makefile depends.  Each file contains a list of the
# archive files upon which each executable depends.  Executables may be 
# built using different LDFLAGS.  When a library in the LDFLAGS list is 
# updated, the executable will be considered out of date and re-made.
##########################################################################

LIB_DEPS := $(patsubst %,./$(LOGIN_ARCH)/%.ldep,$(TESTEXECS) $(EXECUTABLES))

$(LOGIN_ARCH)/%.ldep: $(LOGIN_ARCH)/.exists
	@echo "${BINDIR}/$*: $(call eval_libs,$*)" > $@;



##########################################################################
# Implicit rules to make an object code file in the appropriate 
# architecture-dependent subdirectory. 
##########################################################################

$(LOGIN_ARCH)/%.o: %.c $(LOGIN_ARCH)/.exists
	$(CC) ${INCFLAGS} ${CFLAGS} ${CPPFLAGS} -c -o $@ $<

$(LOGIN_ARCH)/%.o: %.C $(LOGIN_ARCH)/.exists
	$(CCC) ${INCFLAGS} ${CCFLAGS} ${CPPFLAGS} -c -o $@ $<

$(LOGIN_ARCH)/%.o: %.f $(LOGIN_ARCH)/.exists
	$(FC) ${INCFLAGS} ${FFLAGS} ${CPPFLAGS} -c -o $@ $<



##########################################################################
# MakeInfo creates the source code that defines the variables declared
# in MakeInfo.h
##########################################################################

MakeInfo.c = $(LOGIN_ARCH)/MakeInfo.c
MakeInfo.o = $(LOGIN_ARCH)/MakeInfo.o

define MakeInfo
if [ ! -z "`grep MakeInfo\.h $*.[cC]`" ]; then \
  echo "char* MakeInfo_user = \"$${USER}\";" > $(MakeInfo.c); \
  echo "char* MakeInfo_date = \"`date`\";" >> $(MakeInfo.c); \
  $(CC) -c -o $(MakeInfo.o) $(MakeInfo.c); \
fi
endef



##########################################################################
# Rules to make (link) an executable (for example: 'exec') 
# made up of the object file of the same name (exec.o) and, optionally,
# object files listed in the exec.OBJS macro.  This macro is defined in
# ${LOGIN_ARCH}/exec.sdep, included by Makefile.extended when the
# exec.srcs macro is defined in the user's makefile.
#
# The file is linked with LDFLAGS, or exec.LDFLAGS, if defined.
##########################################################################

define check_exec
if [ ! -x $@ ]; then \
  echo "Cleaning up failed compilation: $@"; ($(RM) $@ && exit 1); \
fi
endef

define eval_MakeInfo
$(shell if [ ! -z "`grep MakeInfo\.h $*.[cC]`" ]; then echo $(MakeInfo.o); fi;)
endef

eval_LDFLAGS = $(if $($*.LDFLAGS),$($*.LDFLAGS),$(LDFLAGS))

$(BINDIR)/%: $(LOGIN_ARCH)/%.o %.C
	@$(MakeInfo)
	-$(CCC) ${CCFLAGS} -o $@ $< $($*.OBJS) $(eval_MakeInfo) $(eval_LDFLAGS)
	@rm -f $(MakeInfo.c) $(MakeInfo.o)
	@$(check_exec)

$(BINDIR)/%: $(LOGIN_ARCH)/%.o %.c
	@$(MakeInfo)
	-$(CC) ${CFLAGS} -o $@ $< $($*.OBJS) $(eval_MakeInfo) $(eval_LDFLAGS)
	@rm -f $(MakeInfo.c) $(MakeInfo.o)
	@$(check_exec)

$(BINDIR)/%: $(LOGIN_ARCH)/%.o %.f
	-$(FC) ${FFLAGS} -o $@ $< $($*.OBJS) $(eval_LDFLAGS)
	@$(check_exec)



##########################################################################
# Rules to copy libraries and executables from the user's local "working
# copy" directories to the installed "group copy" directories found in
# Makefile.install
##########################################################################

##########################################################################
# Rule to copy header files to installed and local include/ directories
# found in Makefile.install
##########################################################################

##########################################################################
# Rule to make C++ code from a Qt Meta-Object Code (MOC) header file
##########################################################################
moc_%.C: %.h
	$(QTMOC) $< -o $@



##########################################################################
# Rule to make the standard targets "phony".  eg. no file 'all'
##########################################################################
.PHONY: ${TARGETS} error %.runtest

##########################################################################
# Check for any errors
##########################################################################
ifneq (${strip $(ERROR)},)
RETURN_ERROR := 1
endif

ifneq (${strip $(SOFT_ERROR)},)
RETURN_ERROR := 0
ERROR := "(SOFT)" $(SOFT_ERROR)
endif

ifneq ($(RETURN_ERROR),)

error:
	@echo ERROR: $(ERROR)
	@exit $(RETURN_ERROR)

# ###################################
# force all targets to result in the
# above action
$(MAKECMDGOALS):error

else

###  NO ERRORS: DEFINE STANDARD TARGETS
##########################################################################
##########################################################################

all: libs $(BINS) scripts

include: $(INCS)

libs: include $(LIBS)

scripts: $(SHXS)

test: $(RUNTESTS)

install: $(INSTALL_INCS) $(INSTALL_SHXS) $(INSTALL_LIBS) \
	$(INSTALL_DSO) $(INSTALL_BINS)

clean:
	$(RM) $(LOGIN_ARCH)/*.o $(CLEAN)

depend:
	@$(RM) $(LOGIN_ARCH)/*dep 
	@$(MAKE) -s nothing

nothing:
	@echo nothing > /dev/null

veryclean:
	$(RM) -r $(LOGIN_ARCH) $(CCTEMPLATES) $(LIBS) $(INCS) $(CLEAN)

cvsck:
	@-cvs status | grep atus | grep -v Up

##########################################################################
##########################################################################

ifneq ($(install_yes),install)

###  STATIC PATTERN RULES and EXPLICIT RULES (must follow default targets)
##########################################################################
##########################################################################

##########################################################################
# Static pattern rule to run a test with arguments as specified in the
# user's Makefile
##########################################################################
$(RUNTESTS) : %.runtest : $(BINDIR)/%
	@($< $($*.args) || (echo $< Failed && exit 1))
	@echo "************************************************************"
	@echo ""
	@echo $< $($*.args)
	@echo TEST COMPLETED SUCCESSFULLY
	@echo ""
	@echo "************************************************************"

##########################################################################
# Static pattern rule to copy include files in pwd to include/ directory
##########################################################################
$(BASINCS) : $(INCDIR)/% : ./%
	@$(copy_header)

$(SUBINCS) : $(INCDIR)/$(SUBINCDIR)/% : ./%
	@$(copy_header)

##########################################################################
# Static pattern rule to copy scripts in pwd to csh_script/ directory
##########################################################################
$(SHXS) : $(SHXDIR)/% : ./%
	@$(copy_script)

##########################################################################
# These static pattern rules allow one to type 'make exec' or 'make lib.a'
# to create the target in the appropriate architecture-dependent
# subdirectory.
##########################################################################

$(TESTEXECS) $(EXECUTABLES) : % : $(BINDIR)/%
	@echo $< is up to date

$(LIBRARIES) : %.a : $(LIBDIR)/%.a
	@echo $< is up to date

##########################################################################
# Explicit rule to fetch a source code file from the cvs repository if it 
# cannot be found in the current working directory...  the NONMODULE
# macro can be used to disable this fetch.  eg 'NONMODULE = ephio.h'
##########################################################################
MODULE += $(ALL_SRCS) $(INCLUDES) $(SCRIPTS) $(make_install)
$(filter-out $(NONMODULE), $(MODULE)):
	@if [ ! -f $@ ]; then \
	if [ ! -d CVS ]; then \
		echo "File: $@ does not exist."; \
		exit 1; \
	fi; \
	echo Attempting to retrieve \"$@\" from CVS repository; \
	cvs update $@; \
	if [ ! -f $@ ]; then \
		echo "$@ not found in CVS repository"; \
		exit 1; \
	fi; fi

endif # install_yes != install

##########################################################################
# Explicit rule to make one library from the LIBRARY target.
# Additional libraries must be added to the LIBRARIES macro and given
# explicit make rules in the user's make file.
##########################################################################

ifdef LIBRARY

ONELIB := $(LIBDIR)/$(LIBRARY)

LOBJS := $(call src2obj,$(LIB_SRCS))
LIB_OBJS := $(LOBJS:%=$(LOGIN_ARCH)/%)

$(ONELIB) : $(LIB_OBJS)
	$(AR) $(ARFLAGS) $@ $(LIB_OBJS)
	$(RANLIB) $@

endif


##########################################################################
# Explicit rule to make one dynamic shared object from the DSONAME macro
# Additional libraries must be added to the LIBRARIES macro and given
# explicit make rules in the user's make file.
##########################################################################

ifdef DSO_NAME

DSOLIB := $(DSODIR)/$(DSO_NAME)
DSOBJS := $(call src2obj,$(DSO_SRCS))
DSO_OBJS := $(DSOBJS:%=$(LOGIN_ARCH)/%)

$(DSOLIB) : $(DSO_OBJS)
	@mkdir -p $(dir $(DSOLIB))
	$(DSO) $@ $(DSO_OBJS) $(DSO_FLAGS)

endif

##########################################################################
# Special cases:  for certain targets, the whole makedepend system should
# be relaxed.
##########################################################################
autodepend:=yes
no_makedepend_targets := include scripts clean veryclean cvsck depend

ifneq ($(filter $(no_makedepend_targets),$(MAKECMDGOALS)),)
autodepend:=no
endif # MAKECMDGOALS contains no_makedepend_targets

#############################################################################
# If autodepend is not disabled, include the .dep and .sdep files
#############################################################################
ifeq ($(autodepend),yes)

ifneq ($(SRC_DEPS),)
-include $(SRC_DEPS)
endif

ifneq ($(LIB_DEPS),)
-include $(LIB_DEPS)
endif

ifneq (${strip $(MAKEDEP)},no)
ifneq ($(DEPS),)
-include $(DEPS)
endif # DEPS != ""
endif # MAKEDEP != no

endif # autodepend == yes

##########################################################################
# Rules to ensure that directories are created before making attempts to
# place files in them.  These should remain last in the file, lest they
# interfere with $< expansion
##########################################################################
$(DEPS) $(SRC_DEPS): $(LOGIN_ARCH)/.exists
$(INCS): $(INCDIR)/.exists
$(SHXS): $(SHXDIR)/.exists
$(LIBS): $(LIBDIR)/.exists
$(BINS): $(BINDIR)/.exists

endif # no errors

