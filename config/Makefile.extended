##########################################################################
##########################################################################
# Define those files recognized by make
.SUFFIXES:
.SUFFIXES: .o .c .C .f .h .dep .odep

# Ensure that the proper shell is used
SHELL = /bin/sh
##########################################################################
##########################################################################

###  MACRO DEFINITIONS
##########################################################################
##########################################################################

##########################################################################
# The following lines create the BINS macro, upon which the "all" target 
# depends and the EXECUTABLES macrso used in the calculation of the
# SRC_DEPS macro.
# PROGRAMS and EXECUTABLES macros are defined in the user Makefile
##########################################################################
# Add programs to executables (PROGRAMS lists the source code,
# from which the extensions must be stripped).
EXECS := ${patsubst %.c,%,${patsubst %.f,%,${patsubst %.C,%,${PROGRAMS}}}}
EXECUTABLES += $(EXECS)

# define bin path executables
BINS:=$(EXECUTABLES:%=$(BINDIR)/%)

##########################################################################
# The following lines create the SRC_DEPS macro,
# upon which the Makefile depends.  This allows executables to be built
# from more than one source code file using the 'exec.srcs = blah.c'
# macro functionality
##########################################################################

# expand each exec.srcs macro to exec.srcs="blah.c"
SRCS_EXP := $(foreach exec,$(EXECUTABLES),$(exec).srcs\"${$(exec).srcs}\")
# strip out those expansions with empty ""
SRCS_CLEAN := $(strip $(filter-out %\"\",$(SRCS_EXP)))
# now select those exec.srcs strings left
SRCS_INCLUDE := $(filter %.srcs,$(subst \", ,$(SRCS_CLEAN)))
# and make the list of files to include
SRC_DEPS := $(SRCS_INCLUDE:%.srcs=./$(LOGIN_ARCH)/%.sdep)

# now filter out the exec.srcs strings and remove repeats
OTHER_SRCS += $(sort $(filter-out %.srcs,$(subst \", ,$(SRCS_CLEAN))))

##########################################################################
# The ALL_SRCS macro determines for which files makedepend will be called
# to construct the header file dependency list.
# It also defines those targets that may be built by cvs checkout.
#
# PROGRAMS and LIB_SRCS and TESTS and OTHER_SRCS macros are previously
# defined in the user Makefile.
#
# moc_%.C files are filtered out because they are Qt Meta-Object source
# code created from a .h header file, but the object code may still be
# required in an archive (using LIB_SRCS)
##########################################################################
all_srcs := ${LIB_SRCS} ${PROGRAMS} ${TESTS} ${OTHER_SRCS}
ALL_SRCS := ${filter-out moc_%.C, ${all_srcs}}

##########################################################################
# The following lines create the DEPS macro, upon which the Makefile 
# depends. (unless MAKEDEP=no)  Dependencies are built only for C/C++ code
##########################################################################
DEP_SRCS := ${filter-out $(NOMD_SRCS), $(ALL_SRCS)}
DEP_C_SRCS := ${filter %.C, $(DEP_SRCS)}
DEP_c_SRCS := ${filter %.c, $(DEP_SRCS)}

DEPS := ${DEP_C_SRCS:%.C=./$(LOGIN_ARCH)/%.dep} \
	${DEP_c_SRCS:%.c=./$(LOGIN_ARCH)/%.dep}

##########################################################################
# The following lines create the INCS macro,
# upon which the "include" target depends.
# INCLUDE macro is previously defined in the user Makefile
##########################################################################
INCS:=${INCLUDES:%=$(INCDIR)/%}

##########################################################################
# The following lines create the LIBS macro,
# upon which the "libs" target depends.
# LIBRARY and LIBRARIES macros are previously defined in the user Makefile
##########################################################################
LIBRARIES += ${LIBRARY}
LIBS:=${LIBRARIES:%=$(LIBDIR)/%}

##########################################################################
# The following lines create the TESTBINS macro,
# upon which the "test" target depends...
# TESTS and TESTEXECS macros are previously defined in the user Makefile
##########################################################################
TEXECS := ${patsubst %.c,%,${patsubst %.f,%,${patsubst %.C,%,${TESTS}}}}
TESTEXECS += $(TEXECS)

# define bin path executables
TESTBINS:=$(TESTEXECS:%=$(BINDIR)/%)

##########################################################################
# Flags specified to makedepend
#########################################################################
MDFLAGS += ${INCFLAGS}

ifeq ($(PSRGTKMM),yes)
MDFLAGS += -DGTK_MAJOR_VERSION=2 # makedepend is stupid
endif

##########################################################################
# The INSTALL_INCS, INSTALL_LIBS and INSTALL_BINS macros are constructed
# in a separate Makefile that specializes in installations
##########################################################################
make_install := $(LOCAL_ROOT)/include/Makefile.install
include $(make_install)

##########################################################################
##########################################################################

###  IMPLICIT RULE DEFINITIONS
##########################################################################
##########################################################################

##########################################################################
# Disable attempts to compile C++ include files
##########################################################################
/usr/include/cxx/%:

##########################################################################
# Rules to make the header file dependency list in the appropriate 
# architecture specific subdirectory.
# The recommendation comes from the GNU make 3.77 docucmentation:
# "Writing Rules" chapter; "Generating Dependencies Automatically" section
##########################################################################
$(LOGIN_ARCH)/%.dep: %.c
	$(header_depend)

$(LOGIN_ARCH)/%.dep: %.C
	$(header_depend)

mdtemp :=${LOGIN_ARCH}/.mdtemp

define header_depend
@$(RM) $(mdtemp); touch $(mdtemp)
@echo makedepend $<
@$(MAKEDEPEND) $(mdtemp) ${MDFLAGS} ${CPPFLAGS} $<
@sed 's/$*\.o/$(LOGIN_ARCH)\/$*\.o $(LOGIN_ARCH)\/$*\.dep/g' $(mdtemp) > $@
endef

##########################################################################
# Implicit rule to clean up .dep files that reference header files have 
# been moved or no longer exist where previously found.  This should make
# it so that one never need type 'make depend' ever again.
##########################################################################
%.h:
	@echo Removing outdated header dependencies
	@$(remove_outdated_deps)

define remove_outdated_deps
$(GREP) $@ ${LOGIN_ARCH}/*.dep | $(AWK) -F: '{print "rm -rf "$$1}' | sh
endef

##########################################################################
# Implicit rule to make the source file dependency list in the appropriate
# architecture specific subdirectory.  These files depend on the Makefile,
# as their information is changed only when the link information changes.
##########################################################################
$(LOGIN_ARCH)/%.sdep: %.srcs Makefile
	@echo source depend: $*

SRC2OBJ := sed -e 's/\.c/\.o/g' -e 's/\.C/\.o/g' -e 's/\.f/\.o/g'

# This implicit rule is actually a phony target, as it does not create
# a file of the same name
%.srcs:
	@srcdep_file=$(@:%.srcs=${LOGIN_ARCH}/%.sdep); \
	OBJS=`echo "$($@:%=${LOGIN_ARCH}/%)" | $(SRC2OBJ)`; \
	echo "$(@:%.srcs=%.OBJS) := $$OBJS" > $$srcdep_file; \
	echo "$(@:%.srcs=${BINDIR}/%): $$OBJS" >> $$srcdep_file;

##########################################################################
# Implicit rules to make an object code file in the appropriate 
# architecture-dependent subdirectory. 
##########################################################################

$(LOGIN_ARCH)/%.o: %.c
	$(CC) ${INCFLAGS} ${CFLAGS} ${CPPFLAGS} -c -o $@ $<

$(LOGIN_ARCH)/%.o: %.C
	$(CCC) ${INCFLAGS} ${CCFLAGS} ${CPPFLAGS} -c -o $@ $<

$(LOGIN_ARCH)/%.o: %.f
	$(FC) ${INCFLAGS} ${FFLAGS} ${CPPFLAGS} -c -o $@ $<

##########################################################################
# Rules to make (link) an executable (for example: 'exec') 
# made up of the object file of the same name (exec.o) and, optionally,
# object files listed in the exec.OBJS macro.  This macro is defined in
# ${LOGIN_ARCH}/exec.odep included by Makefile.extended when the
# exec.srcs macro is defined in the user's makefile.
#
# The file is linked with LDFLAGS, or exec.LDFLAGS, if defined.
##########################################################################

#lib_dir_fl := $(filter -L%,$(LDFLAGS))
#lib_dirs  := $(lib_dir_fl:-L=)
#all_libs  := $(foreach dir,$(lib_dirs),$(wildcard $(dir)/*.a))
#lflags    := $(filter -l%,$(LDFLAGS))
#libraries := $(lflags:-l%=$(LIBDIR)/%.a)

define check_exec
if [ ! -x $@ ]; then \
echo "Cleaning up failed compilation: $@"; ($(RM) $@ && exit 1); \
fi
endef

define eval_LDFLAGS
if [ -z "$($*.LDFLAGS)" ]; then echo $(LDFLAGS); \
else echo $($*.LDFLAGS); fi
endef

$(BINDIR)/%: $(LOGIN_ARCH)/%.o %.c $(LIBS)
	-$(CC) ${CFLAGS} -o $@ $< $($*.OBJS) $(shell $(eval_LDFLAGS))
	@$(check_exec)

$(BINDIR)/%: $(LOGIN_ARCH)/%.o %.C $(LIBS)
	-$(CCC) ${CCFLAGS} -o $@ $< $($*.OBJS) $(shell $(eval_LDFLAGS))
	@$(check_exec)

$(BINDIR)/%: $(LOGIN_ARCH)/%.o %.f $(LIBS)
	-$(FC) ${FFLAGS} -o $@ $< $($*.OBJS) $(shell $(eval_LDFLAGS))
	@$(check_exec)

##########################################################################
# Rules to copy libraries and executables from the user's local "working
# copy" directories to the installed "group copy" directories found in
# Makefile.install
##########################################################################

##########################################################################
# Rule to copy header files to installed and local include/ directories
# found in Makefile.install
##########################################################################

##########################################################################
# Rule to make C++ code from a Qt Meta-Object Code (MOC) header file
##########################################################################
moc_%.C: %.h
	$(QTMOC) $< -o $@

##########################################################################
##########################################################################

###  STANDARD TARGETS

##########################################################################
##########################################################################

##########################################################################
# Rule to make the standard targets "phony".  eg. no file 'all'
##########################################################################
.PHONY: ${TARGETS} %.srcs error

##########################################################################
# Check for any errors
##########################################################################
ifneq (${strip $(ERROR)},)
RETURN_ERROR := 1
endif

ifneq (${strip $(SOFT_ERROR)},)
RETURN_ERROR := 0
ERROR := (SOFT) $(SOFT_ERROR)
endif

ifneq ($(RETURN_ERROR),)

error:
	@echo ERROR: $(ERROR)
	@exit $(RETURN_ERROR)

# ###################################
# force all targets to result in the
# above action
$(MAKECMDGOALS):error

else

ifeq ($(install_yes),install)

install: $(INSTALL_INCS) $(INSTALL_LIBS) $(INSTALL_BINS)

else

all: libs $(BINS)

include: $(INCS)

$(INCS) : $(INCDIR)/% : ./% $(INCDIR)/.exists
	@$(copy_header)

# copy the include files only after successful compilation
libs: $(LIBS) include

test: $(TESTBINS)
	@if [ -z "$(TESTBINS)" ]; then echo No tests to perform.; \
	else for test in $(TESTBINS); do ($$test || exit 1); done; fi;

clean:
	$(RM) $(LOGIN_ARCH)/*.o

veryclean:
	$(RM) -r $(LOGIN_ARCH) $(CCTEMPLATES) $(LIBS) $(INCS)

endif # install_yes != install

##########################################################################
##########################################################################

##########################################################################
# These static pattern rules allow one to type 'make exec' or 'make lib.a'
# to create the target in the appropriate architecture-dependent
# subdirectory.
##########################################################################

$(TESTEXECS) $(EXECUTABLES) : % : $(BINDIR)/%
	@echo $< is up to date

$(LIBRARIES) : %.a : $(LIBDIR)/%.a
	@echo $< is up to date

##########################################################################
# Explicit rule to fetch a source code file from the cvs repository if it 
# cannot be found in the current working directory...  the NONMODULE
# macro can be used to disable this fetch.  eg 'NONMODULE = ephio.h'
##########################################################################
MODULE += $(ALL_SRCS) $(INCLUDES) $(make_install)
$(filter-out $(NONMODULE), $(MODULE)):
	cvs update $@
	@if [ ! -f $@ ]; then \
		echo "$@ not found in CVS repository"; \
		exit 1; \
	fi;

##########################################################################
# Explicit rule to make one library from the LIBRARY target.
# Additional libraries must be added to the LIBRARIES macro and given
# explicit make rules in the user's make file.
##########################################################################

ONELIB := ${LIBDIR}/${LIBRARY}

LOBJS:=${patsubst %.c,%.o,${patsubst %.f,%.o,${patsubst %.C,%.o,${LIB_SRCS}}}}
LIB_OBJS := ${LOBJS:%=${LOGIN_ARCH}/%}

$(ONELIB) : $(LIB_OBJS)
	@echo $(LIB_SRCS)
	$(AR) $(ARFLAGS) $@ $?
	$(RANLIB) $@

##########################################################################
# Special cases: if the make target is depend, clean or veryclean, then 
# certain automatic dependencies need to be relaxed
##########################################################################
autodepend:=yes
ifneq (${strip $(MAKECMDGOALS)},)
ifneq ($(filter include clean veryclean,$(MAKECMDGOALS)),)
autodepend:=no
endif # MAKECMDGOALS contains include, clean or veryclean
endif # MAKECMDGOALS != ""

#############################################################################
# If autodepend is not disabled, include the .dep and .sdep files
#############################################################################
ifeq ($(autodepend),yes)

REQD_DIRS := $(INCDIR) $(LIBDIR) $(BINDIR) $(LOGIN_ARCH)
Makefile $(DEPS) $(SRC_DEPS): $(REQD_DIRS:%=%/.exists)

ifneq ($(SRC_DEPS),)
-include $(SRC_DEPS)
endif

ifneq (${strip $(MAKEDEP)},no)
ifneq ($(DEPS),)
-include $(DEPS)
endif # DEPS != ""
endif # MAKEDEP != no

endif # autodepend == yes

endif # no errors

